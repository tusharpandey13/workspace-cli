<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="129" failures="2" errors="0" time="50.532">
    <testsuite name="test/config.test.ts" timestamp="2025-09-09T06:54:43.869Z" hostname="CCWHLHFX7C" tests="17" failures="0" errors="0" skipped="0" time="0.068">
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should validate the current config.yaml structure" time="0.009">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should have next project configuration" time="0.002">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should have spa project configuration" time="0.002">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should not have node or react projects" time="0.002">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should have global configuration" time="0.004">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration structure &gt; should have templates configuration" time="0.003">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Project retrieval &gt; should retrieve next project by key" time="0.006">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Project retrieval &gt; should retrieve spa project by key" time="0.006">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Project retrieval &gt; should throw error for non-existent project" time="0.006">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Project retrieval &gt; should list available projects in error message" time="0.005">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Environment file configuration &gt; should have spa.env.local file" time="0.001">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Environment file configuration &gt; should have correct environment variables in spa.env.local" time="0.002">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Path resolution &gt; should resolve tilde paths in src_dir" time="0.006">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Path resolution &gt; should resolve relative paths in env_files_dir" time="0.004">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration validation &gt; should validate project keys exist" time="0.003">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration validation &gt; should ensure spa project has required fields" time="0.002">
        </testcase>
        <testcase classname="test/config.test.ts" name="Config &gt; Configuration validation &gt; should ensure spa project has valid sample_repo format" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="test/help.test.ts" timestamp="2025-09-09T06:54:43.872Z" hostname="CCWHLHFX7C" tests="7" failures="0" errors="0" skipped="0" time="2.182">
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display main help with --help" time="0.308">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display init command help with -h" time="0.332">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display list command help" time="0.324">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display projects command help" time="0.319">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display info command help" time="0.319">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display clean command help" time="0.316">
        </testcase>
        <testcase classname="test/help.test.ts" name="CLI Help Tests &gt; should display submit command help" time="0.263">
        </testcase>
    </testsuite>
    <testsuite name="test/init.test.ts" timestamp="2025-09-09T06:54:43.872Z" hostname="CCWHLHFX7C" tests="8" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Worktree Setup Logic &gt; should use specified branch for SDK worktree and fallback to default branch for sample worktree" time="0.001">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Worktree Setup Logic &gt; should handle mixed repository types (local paths vs repository names)" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Worktree Setup Logic &gt; should gracefully fallback when branch does not exist in sample repository" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Worktree Setup Logic &gt; should handle repositories with master as default branch" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Configuration Path Resolution &gt; should correctly resolve relative sample repository paths" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Configuration Path Resolution &gt; should handle tilde expansion in SDK repository paths" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Error Handling &gt; should provide helpful error messages when worktree creation fails" time="0">
        </testcase>
        <testcase classname="test/init.test.ts" name="Init Commands &gt; Error Handling &gt; should handle non-existent sample repository paths" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="test/logger.test.ts" timestamp="2025-09-09T06:54:43.873Z" hostname="CCWHLHFX7C" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="test/logger.test.ts" name="Logger &gt; should respect log levels" time="0.001">
        </testcase>
        <testcase classname="test/logger.test.ts" name="Logger &gt; should format messages with appropriate icons" time="0">
        </testcase>
        <testcase classname="test/logger.test.ts" name="Logger &gt; should support step progress logging" time="0">
        </testcase>
    </testsuite>
    <testsuite name="test/path-resolution.test.ts" timestamp="2025-09-09T06:54:43.873Z" hostname="CCWHLHFX7C" tests="11" failures="0" errors="0" skipped="0" time="0.066">
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Relative path resolution &gt; should resolve relative sdk_repo paths relative to src_dir" time="0.01">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Relative path resolution &gt; should resolve relative sample_repo paths relative to src_dir" time="0.004">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Relative path resolution &gt; should handle tilde paths in src_dir" time="0.003">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Relative path resolution &gt; should leave absolute paths unchanged" time="0.005">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Relative path resolution &gt; should leave HTTP URLs unchanged" time="0.004">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; getWorkspacePaths with resolved paths &gt; should handle already resolved absolute paths correctly" time="0.009">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Repository validation &gt; should provide helpful error messages for missing SDK repository" time="0.006">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Repository validation &gt; should skip validation for HTTP URLs" time="0.007">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Repository validation &gt; should warn but not fail for missing sample repositories" time="0.009">
            <system-err>
[33m⚠️  Sample repository does not exist: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/workspace-cli-test-7hBauR/src/nonexistent-samples[39m
[33mThis may cause sample app setup to fail. Consider cloning the repository first.[39m

            </system-err>
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Edge cases &gt; should handle empty src_dir gracefully" time="0.006">
        </testcase>
        <testcase classname="test/path-resolution.test.ts" name="Path Resolution &gt; Edge cases &gt; should handle missing projects section" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="test/pr.test.ts" timestamp="2025-09-09T06:54:43.874Z" hostname="CCWHLHFX7C" tests="23" failures="2" errors="0" skipped="0" time="50.198">
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; fetchPRData &gt; should fetch real PR data successfully" time="3.47">
            <failure message="expected &apos;pr-123&apos; to be &apos;feature/test-branch&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;pr-123&apos; to be &apos;feature/test-branch&apos; // Object.is equality

- Expected
+ Received

- feature/test-branch
+ pr-123

 ❯ test/pr.test.ts:172:33
            </failure>
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; fetchPRData &gt; should return mock data for dry run" time="0.001">
            <failure message="expected 456 to be 123 // Object.is equality" type="AssertionError">
AssertionError: expected 456 to be 123 // Object.is equality

- Expected
+ Received

- 123
+ 456

 ❯ test/pr.test.ts:215:30
            </failure>
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; fetchPRData &gt; should handle GitHub API errors gracefully" time="0.001">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; fetchPRData &gt; should extract branch name correctly" time="2.312">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; fetchPRData &gt; should fallback to default branch name if head.ref is missing" time="2.378">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should initialize PR workspace successfully" time="2.537">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should handle existing workspace gracefully" time="2.38">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should work in dry run mode" time="0.001">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should handle git worktree setup failures gracefully" time="2.425">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should setup environment files correctly" time="2.387">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should update template placeholders correctly" time="2.487">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should create PR info file" time="2.42">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should handle different package managers" time="2.577">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; initializePRWorkspace &gt; should link SDK to sample app via yalc" time="2.575">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Git Worktree Setup &gt; should fetch PR branch before setting up SDK worktree" time="2.351">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Git Worktree Setup &gt; should handle git fetch failures gracefully" time="2.385">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Git Worktree Setup &gt; should use fallback worktree creation strategies" time="2.294">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Error Handling &gt; should handle missing environment files gracefully" time="2.588">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Error Handling &gt; should handle template directory missing" time="2.565">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Template Processing &gt; should generate proper placeholder values" time="2.421">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Template Processing &gt; should handle empty template directories" time="2.817">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; SDK Key Files Generation &gt; should handle SDK key files detection" time="2.461">
        </testcase>
        <testcase classname="test/pr.test.ts" name="PR Commands &gt; Sample Key Files Generation &gt; should handle sample files detection" time="2.362">
        </testcase>
    </testsuite>
    <testsuite name="test/project-validation.test.ts" timestamp="2025-09-09T06:54:43.877Z" hostname="CCWHLHFX7C" tests="4" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="test/project-validation.test.ts" name="Project validation &gt; validateProjectKey &gt; should accept valid project keys" time="0">
        </testcase>
        <testcase classname="test/project-validation.test.ts" name="Project validation &gt; validateProjectKey &gt; should reject invalid project keys" time="0.001">
        </testcase>
        <testcase classname="test/project-validation.test.ts" name="Project validation &gt; validateProjectKey &gt; should limit project key length" time="0">
        </testcase>
        <testcase classname="test/project-validation.test.ts" name="Project validation &gt; validateProjectKey &gt; should preserve exact valid input" time="0">
        </testcase>
    </testsuite>
    <testsuite name="test/prompt-selector.test.ts" timestamp="2025-09-09T06:54:43.877Z" hostname="CCWHLHFX7C" tests="14" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from branch names &gt; should detect issue-fix workflow from branch names" time="0.002">
            <system-out>
[34mℹ️  Detected workflow: issue-fix[39m
[34mℹ️  Detected workflow: issue-fix[39m
[34mℹ️  Detected workflow: issue-fix[39m
[34mℹ️  Detected workflow: issue-fix[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from branch names &gt; should detect feature-development workflow from branch names" time="0">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m
[34mℹ️  Detected workflow: feature-development[39m
[34mℹ️  Detected workflow: feature-development[39m
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from branch names &gt; should detect maintenance workflow from branch names" time="0">
            <system-out>
[34mℹ️  Detected workflow: maintenance[39m
[34mℹ️  Detected workflow: maintenance[39m
[34mℹ️  Detected workflow: maintenance[39m
[34mℹ️  Detected workflow: maintenance[39m
[34mℹ️  Detected workflow: maintenance[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from branch names &gt; should detect exploration workflow from branch names" time="0.001">
            <system-out>
[34mℹ️  Detected workflow: exploration[39m
[34mℹ️  Detected workflow: exploration[39m
[34mℹ️  Detected workflow: exploration[39m
[34mℹ️  Detected workflow: exploration[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from GitHub data &gt; should detect issue-fix workflow from GitHub labels" time="0">
            <system-out>
[34mℹ️  Detected workflow: issue-fix[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from GitHub data &gt; should detect feature-development workflow from GitHub labels" time="0">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; workflow detection from GitHub data &gt; should detect maintenance workflow from GitHub content" time="0">
            <system-out>
[34mℹ️  Detected workflow: maintenance[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; fallback scenarios &gt; should default to feature-development when no GitHub data and neutral branch name" time="0">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; fallback scenarios &gt; should prioritize branch name over unclear GitHub data" time="0">
            <system-out>
[34mℹ️  Detected workflow: issue-fix[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; fallback scenarios &gt; should use default prompts when workflow config is missing" time="0.001">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; edge cases &gt; should handle empty GitHub data arrays" time="0">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; edge cases &gt; should handle GitHub data with empty labels" time="0">
            <system-out>
[34mℹ️  Detected workflow: feature-development[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; edge cases &gt; should handle case-insensitive branch name matching" time="0">
            <system-out>
[34mℹ️  Detected workflow: issue-fix[39m

            </system-out>
        </testcase>
        <testcase classname="test/prompt-selector.test.ts" name="PromptSelector &gt; edge cases &gt; should handle missing title or body in GitHub data" time="0">
            <system-out>
[34mℹ️  Detected workflow: issue-fix[39m

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="test/sample-app-infra-integration.test.ts" timestamp="2025-09-09T06:54:43.879Z" hostname="CCWHLHFX7C" tests="5" failures="0" errors="0" skipped="0" time="0.031">
        <testcase classname="test/sample-app-infra-integration.test.ts" name="SampleAppInfrastructureManager Integration &gt; React Version-based Testing Library Selection &gt; should select React 19 compatible testing library for React 19 Next.js app" time="0.01">
            <system-out>
[34mℹ️  🔧 Setting up testing infrastructure for next sample app...[39m

[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/tests[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/tests/mocks[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/test-results[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/coverage[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/tests/components[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-TUkIa6/tests/e2e[39m
[34mℹ️  Would add scripts: test, test:watch, test:coverage, test:debug, test:ui, test:reporter, test:e2e, test:e2e:ui, test:e2e:report[39m
[34mℹ️  Would create config: vitest.config.ts[39m
[34mℹ️  Would create config: playwright.config.ts[39m
[34mℹ️  Would create config: tests/setup.ts[39m
[34mℹ️  Would create test: tests/mocks/server.ts[39m
[34mℹ️  Would create test: tests/mocks/handlers.ts[39m
[34mℹ️  Would create test: tests/components/sample.test.tsx[39m
[32m✅ ✅ Testing infrastructure configured for next sample app[39m

            </system-out>
        </testcase>
        <testcase classname="test/sample-app-infra-integration.test.ts" name="SampleAppInfrastructureManager Integration &gt; React Version-based Testing Library Selection &gt; should select React 18 compatible testing library for React 18 Next.js app" time="0.007">
            <system-out>
[34mℹ️  🔧 Setting up testing infrastructure for next sample app...[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/tests[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/tests/mocks[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/test-results[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/coverage[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/tests/components[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-vC0y4x/tests/e2e[39m
[34mℹ️  Would add scripts: test, test:watch, test:coverage, test:debug, test:ui, test:reporter, test:e2e, test:e2e:ui, test:e2e:report[39m
[34mℹ️  Would create config: vitest.config.ts[39m
[34mℹ️  Would create config: playwright.config.ts[39m
[34mℹ️  Would create config: tests/setup.ts[39m
[34mℹ️  Would create test: tests/mocks/server.ts[39m
[34mℹ️  Would create test: tests/mocks/handlers.ts[39m
[34mℹ️  Would create test: tests/components/sample.test.tsx[39m
[32m✅ ✅ Testing infrastructure configured for next sample app[39m

            </system-out>
        </testcase>
        <testcase classname="test/sample-app-infra-integration.test.ts" name="SampleAppInfrastructureManager Integration &gt; React Version-based Testing Library Selection &gt; should handle missing React version gracefully" time="0.005">
            <system-out>
[34mℹ️  🔧 Setting up testing infrastructure for next sample app...[39m

[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/tests[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/tests/mocks[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/test-results[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/coverage[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/tests/components[39m
[34mℹ️  Would create directory: /var/folders/xq/y6vqzwxn3x3d5dmj56npjwp00000gp/T/sample-app-test-XBnO0L/tests/e2e[39m
[34mℹ️  Would add scripts: test, test:watch, test:coverage, test:debug, test:ui, test:reporter, test:e2e, test:e2e:ui, test:e2e:report[39m
[34mℹ️  Would create config: vitest.config.ts[39m
[34mℹ️  Would create config: playwright.config.ts[39m
[34mℹ️  Would create config: tests/setup.ts[39m
[34mℹ️  Would create test: tests/mocks/server.ts[39m
[34mℹ️  Would create test: tests/mocks/handlers.ts[39m
[34mℹ️  Would create test: tests/components/sample.test.tsx[39m
[32m✅ ✅ Testing infrastructure configured for next sample app[39m

            </system-out>
        </testcase>
        <testcase classname="test/sample-app-infra-integration.test.ts" name="SampleAppInfrastructureManager Integration &gt; Error Recovery Scenarios &gt; should provide helpful error information for peer dependency conflicts" time="0.005">
        </testcase>
        <testcase classname="test/sample-app-infra-integration.test.ts" name="SampleAppInfrastructureManager Integration &gt; Backward Compatibility &gt; should maintain compatibility with existing React 17 apps" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="test/sample-app-infra.test.ts" timestamp="2025-09-09T06:54:43.879Z" hostname="CCWHLHFX7C" tests="26" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectAppType &gt; should detect Next.js app type" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectAppType &gt; should detect Node.js app type with Express" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectAppType &gt; should detect SPA app type" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectAppType &gt; should return unknown when no package.json exists" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectAppType &gt; should handle errors gracefully" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectReactVersion &gt; should detect React 19 version" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectReactVersion &gt; should detect React 18 version with caret" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectReactVersion &gt; should return null when no React found" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectReactVersion &gt; should return null when package.json does not exist" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; detectReactVersion &gt; should handle invalid version formats" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getReactTestingLibraryVersionForReact &gt; should return correct version for React 19" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getReactTestingLibraryVersionForReact &gt; should return correct version for React 18" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getReactTestingLibraryVersionForReact &gt; should return correct version for React 17" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getReactTestingLibraryVersionForReact &gt; should default to React 18 version for unsupported versions" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; installDependencies &gt; should install dependencies successfully" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; installDependencies &gt; should retry with --legacy-peer-deps on ERESOLVE error" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; installDependencies &gt; should retry with --legacy-peer-deps on peer dep error" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; installDependencies &gt; should throw error for non-peer-dependency errors" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; installDependencies &gt; should skip installation in dry run mode" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; setupTestingInfrastructure &gt; should set up Next.js infrastructure with React 19" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; setupTestingInfrastructure &gt; should handle unknown app type gracefully" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; setupTestingInfrastructure &gt; should work without React version detection" time="0.001">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; setupTestingInfrastructure &gt; should handle dependency installation failure" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getInfrastructureConfig &gt; should return Next.js configuration" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getInfrastructureConfig &gt; should return SPA configuration" time="0">
        </testcase>
        <testcase classname="test/sample-app-infra.test.ts" name="SampleAppInfrastructureManager &gt; getInfrastructureConfig &gt; should return Node.js configuration" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="test/validation.test.ts" timestamp="2025-09-09T06:54:43.881Z" hostname="CCWHLHFX7C" tests="11" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateBranchName &gt; should accept valid branch names" time="0.001">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateBranchName &gt; should sanitize dangerous characters" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateBranchName &gt; should throw error for invalid inputs" time="0.001">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateBranchName &gt; should limit branch name length" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateGitHubIds &gt; should accept valid GitHub IDs" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateGitHubIds &gt; should throw error for invalid IDs" time="0.001">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateGitHubIds &gt; should require array input" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateWorkspaceName &gt; should accept valid workspace names" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateWorkspaceName &gt; should sanitize workspace names" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateWorkspaceName &gt; should throw error for invalid inputs" time="0">
        </testcase>
        <testcase classname="test/validation.test.ts" name="validation utilities &gt; validateWorkspaceName &gt; should limit workspace name length" time="0">
        </testcase>
    </testsuite>
</testsuites>
