import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import fs from 'fs-extra';
import path from 'path';
import { SetupWizard } from '../src/services/setupWizard.js';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

describe('SetupWizard', () => {
  let tempDir: string;
  let wizard: SetupWizard;
  let originalConfigPath: string;

  beforeEach(async () => {
    // Create a temporary directory for testing
    tempDir = await fs.mkdtemp(path.join(__dirname, '../temp-'));

    // Create wizard instance
    wizard = new SetupWizard();

    // Store original config path and override for testing
    originalConfigPath = (wizard as any).configPath;
    (wizard as any).configPath = path.join(tempDir, '.space-config.yaml');
  });

  afterEach(async () => {
    // Restore original config path
    (wizard as any).configPath = originalConfigPath;

    // Clean up temp directory
    if (await fs.pathExists(tempDir)) {
      await fs.remove(tempDir);
    }
  });

  describe('isSetupNeeded', () => {
    it('should return true when config file does not exist', () => {
      expect(wizard.isSetupNeeded()).toBe(true);
    });

    it('should return false when config file exists', async () => {
      // Create a config file
      await fs.writeFile((wizard as any).configPath, 'test: content');

      expect(wizard.isSetupNeeded()).toBe(false);
    });

    it('should return true when force option is set', async () => {
      // Create a config file
      await fs.writeFile((wizard as any).configPath, 'test: content');

      expect(wizard.isSetupNeeded({ force: true })).toBe(true);
    });

    it('should return false when skip option is set', () => {
      expect(wizard.isSetupNeeded({ skip: true })).toBe(false);
    });
  });

  describe('showPreview', () => {
    it('should display preview information', async () => {
      const originalLog = console.log;
      const logs: string[] = [];
      console.log = (message: string) => {
        logs.push(message);
      };

      await wizard.showPreview();

      console.log = originalLog;

      expect(logs.some((log) => log.includes('Setup Preview'))).toBe(true);
      expect(logs.some((log) => log.includes('Create a ~/.space-config.yaml file'))).toBe(true);
      expect(logs.some((log) => log.includes('space init'))).toBe(true);
    });
  });

  describe('writeConfiguration', () => {
    it('should write a valid YAML configuration', async () => {
      const testConfig = {
        projects: {
          test: {
            name: 'Test Project',
            repo: 'https://github.com/test/repo.git',
          },
        },
        global: {
          src_dir: '~/src',
          workspace_base: 'workspaces',
          env_files_dir: './env-files',
        },
      };

      await (wizard as any).writeConfiguration(testConfig);

      // Check that the file was created
      expect(await fs.pathExists((wizard as any).configPath)).toBe(true);

      // Check the content
      const content = await fs.readFile((wizard as any).configPath, 'utf8');
      expect(content).toContain('projects:');
      expect(content).toContain('test:');
      expect(content).toContain('name: Test Project');
      expect(content).toContain('global:');
      expect(content).toContain('src_dir: ~/src');
    });

    it('should include a header comment', async () => {
      const testConfig = {
        projects: {},
        global: {
          src_dir: '~/src',
          workspace_base: 'workspaces',
          env_files_dir: './env-files',
        },
      };

      await (wizard as any).writeConfiguration(testConfig);

      const content = await fs.readFile((wizard as any).configPath, 'utf8');
      expect(content).toContain('# space-cli configuration');
      expect(content).toContain('# Generated by setup wizard');
    });
  });

  describe('run', () => {
    it('should return skipped result when skip option is true', async () => {
      const result = await wizard.run({ skip: true });

      expect(result).toEqual({
        completed: false,
        skipped: true,
      });
    });

    it('should handle basic configuration setup flow', async () => {
      // This test validates the wizard structure without requiring user input
      // We test the isSetupNeeded and configuration writing separately
      expect(wizard.isSetupNeeded()).toBe(true);

      // Test that the wizard can write a basic configuration
      const testConfig = {
        projects: {},
        global: {
          src_dir: '~/src',
          workspace_base: 'workspaces',
          env_files_dir: './env-files',
        },
      };

      await (wizard as any).writeConfiguration(testConfig);

      expect(await fs.pathExists((wizard as any).configPath)).toBe(true);
      expect(wizard.isSetupNeeded()).toBe(false);
    });
  });
});
